{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16140\viewh21740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \ul \ulc0 Lab | Tutorials : GPS\

\i \ulnone 2D and 3D GPS Mapping in Processing
\i0\fs24 \ul \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \ulnone \
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b\fs26 \cf0 \ul \ulc0 GPS
\b0 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\fs24 \cf0 \
\
\
GPS mapping is an obvious tactic to use in the field of data visualization. We first became invested in the assorted solutions to it after playing with various Processing sketches to access the realtime GPS hardware sensor on Android devices. For 2D mapping, we were able to source the math needed to plot the points online, but have yet to find a Library designed to do this. For 3D, or spherical, mapping, we were able to use the latest ToxiLibs library to great effect. \
\
In the following tutorial, we'll show how.\
\
\
\
\

\b Earth 2D
\b0 \
\
This technique is self-developed, and consists of two simple classes and an array. Our declarations are as follows:\
\
WorldMap wmap;\
Point[] cities;\
\
Within setup(), we instantiate the WorldMap class, then add each GPS location to both the Point Array and the WorldMap function getPoint().\
\
  wmap = new WorldMap();\
  cities = new Point[] \{\
    wmap.getPoint(52.31, 13.25) // Berlin\
  \};\
\
Note that we've done this within setup, for just one point, but it is possible to add as many as you like, and dynamically elsewhere in your sketch.\
Within the WorldMap Class, our WorldMap() function places the earth image and draws it to the background, while the getPoint() function converts the GPS coordinates to world coordinates:\
\
  Point getPoint(float phi, float lambda) \{\
    return new Point(x + ((180+lambda)/360)*w, y + h - ((90+phi)/180)*h);\
  \}\
\
Our final draw function  draws the earth image and an ellipse for every point we created: \
\
void draw() \{\
 wmap.drawBackground();\
 fill(255, 150, 0);\
 for (int i = 0; i < cities.length; i++) \{\
   ellipse(cities[i].x, cities[i].y, 14, 14);\
  \}\
\}\
\
And that's it!\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b \cf0 Earth 3D
\b0 \
\
\
From there, it was just a matter of figuring out how to translate Cartesian coordinates to Spherical ones. Luckily, we were able to reference some built-in functions in ToxiLibs. Within the Vec3D class, there are several functions for spherical computation, such as computePosOnSphere(). In our case, the entire spherical mapping looked like \
\
Vec2D gps;\
Vec3D pos;\
\
public void setLatLon() \{\
  // set to Berlin\
  gps = new Vec2D(13.3978, 52.5329);\
\
\}\
\
public Vec3D computePosOnSphere(int globeRadius) \{\
  pos = new Vec3D(globeRadius, MathUtils.radians(gps.x) + MathUtils.PI,MathUtils.radians(gps.y)).toCartesian();\
  return pos;\
\}\
\
public void callPos() \{\
  setLatLon();\
  computePosOnSphere(globeRadius); \
\}\
\
We call the callPos() function within our renderGlobe() function\
\
public void renderGlobe() \{\
  callPos();\
  pushMatrix();\
    translate(width/2, height/2, zoom);\
    rotateY(rotationY);\
    rotateX(mouseY * 0.01f);\
    beginShape();\
      lights();\
      noStroke();  \
      texturedSphere(globeRadius, texmap);\
    endShape();\
    strokeWeight(3);\
    stroke(0, 255, 155);\
    point(-pos.x, -pos.y, pos.z);\
    line(0, 0, 0, -pos.x, -pos.y, pos.z);\
  popMatrix();\
  rotationY -= 0.01;\
\}\
\
which translates and draws our globe and GPS points, and itself is called within draw()\
\
void draw() \{\
  background(0,0,10);  \
  zoom = y * 5;  \
  renderGlobe();\
\}\
\
\
Again, in this instance, there is only one GPS location, but the sketch can be easily expanded to have multiple locations, or built inside of a class.\
It is worth noting that the spherical construction itself is taken from open-source code by Karsten Schmidt/Mike Chang/Aaron Koblin/Andres Colubri.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}